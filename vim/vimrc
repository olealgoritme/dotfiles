" Author: Ole Algoritme <olealgoritme@gmail.com>
" Source: https://github.com/olealgoritme/dotfiles
" Inspiration: https://github.com/ronakg

source ~/.vim/sane_vimrc
set clipboard+=unnamedplus

" marks current line
set cursorline

command! -nargs=0 Prettier :CocCommand prettier.formatFile
set makeprg=mvn\ -q\ -f\ pom.xml\ jar:install
let g:NERDTreeWinSize = 45
let g:vue_pre_processors = 'detect_on_enter'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:python3_host_prog = '/usr/bin/python3'
let g:python_host_prog = '/usr/bin/python2'




" turn off highlight search
nnoremap <Esc> :nohlsearch<CR><Esc>
nnoremap <leader>n :set hlsearch!<cr>

" testin start

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c
set shortmess+=a

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
"inoremap <silent><expr> <TAB>
      "\ pumvisible() ? "\<C-n>" :
      "\ <SID>check_back_space() ? "\<TAB>" :
      "\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
  "let col = col('.') - 1
  "return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" testing end



" autocommand group
augroup xuw_cfg_autocmd
    autocmd!
    autocmd VimEnter * call s:customGlobalVars()
    autocmd VimEnter * call s:customMappings()
    autocmd VimEnter * call s:customCommandsIfEmptyFile()

    "autocmd VimEnter *
            "\   if !argc()
            "\ |   Startify
            "\ |   NERDTree
            "\ |   wincmd w
            "\ | endif

    " Left/Right-arrow = open/close
    autocmd FileType nerdtree nmap <buffer> <Right> o
    autocmd FileType nerdtree nmap <buffer> <Left> o

    autocmd FileType java set tags=~/.tags/java_jdk_src.tag

    " Close NERDTree if it's the only window open
    "autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " syntax highlight for config or config.cfg / .conf
    autocmd BufEnter,BufRead *.conf,*.cfg,*conf* setf dosini

    " Highlight currently open buffer in NERDTree
    autocmd BufEnter * call NERDTreeSync()

    " Remove whitespace on save
    autocmd BufWritepost * call StripTrailingWhite()

augroup END


function! s:customGlobalVars()
    " General vim config
    let g:mapleader = "\<Space>"

    " Dracula colorscheme
    let g:dracula_colorterm = 0


    " NERDTree config
    let g:NERDCreateDefaultMappings = 0
    let g:NERDRemoveExtraSpaces = 0
endfunction

function! s:customCommandsIfEmptyFile()
    if @% == ""
        " No filename for current buffer
      elseif filereadable(@%) == 0
        " File doesn't exist yet
      elseif line('$') == 1 && col('$') == 1
        " File is empty
      endif
endfunction

function! s:customMappings()

    nnoremap <silent><C-f> :Files<CR>
    nnoremap <silent><C-b> :Buffers<CR>
    nnoremap <silent><C-n> :NERDTreeToggle<CR>

    map <S-h> <S-Left>
    map <S-j> <S-Down>
    map <S-k> <S-Up>
    map <S-l> <S-Right>

    map <C-h> <C-Left>
    map <C-j> <C-Down>
    map <C-k> <C-Up>
    map <C-l> <C-Right>

    " jumps to the next/previous function
    nnoremap <silent><A-Up>   :call search('\(\(def\\|func\\|function\\|\\if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "bw")<CR>
    nnoremap <silent><A-Down> :call search('\(\(def\\|func\\|function\\|\\if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "w")<CR>

    " select all lines till empty line
    vnoremap <silent><S-Up> {
    vnoremap <silent><S-Down> }

    " next tagbar map tag
    let g:tagbar_map_nexttag="<C-Down>"
    let g:tagbar_map_prevtag="<C-Up>"

    " NERDTree bindings
    map <silent><F3> :NERDTreeToggle<CR>

    " Tagbar bindings
    map <silent><F2> :TagbarToggle<CR>

    " Open file under cursor
    nnoremap <Leader>fo <C-w>f<C-w>L

    " GC = General Comment
    nmap gc <plug>NERDCommenterToggle
    "GC = General Comment
    vmap gc <plug>NERDCommenterSexy

    " Ctrl+T new tab
    nnoremap <C-t>     :tabnew<CR>
    inoremap <C-t>     <Esc>:tabnew<CR>

    " Switch windows with TAB only
    nnoremap <Tab>    <C-w>w

    " Switch between buffers using alt+left/right arrow
    nnoremap <silent><A-Right> :call NextBuffer()<CR>
    nnoremap <silent><A-Left> :call PrevBuffer()<CR>

    vnoremap <Leader><Enter> <Esc>i<Enter><Esc>
    nnoremap <Leader><Enter> i<Enter><Esc>
    nnoremap <Leader><Tab> i<Leader><Tab><Esc>
    nnoremap <Leader><Leader> i<Leader><Esc>


    " RONAKG start
    "nnoremap \ :nohlsearch<CR>
    " Jump to start of function
    nnoremap [[ ?{<CR>w99[{:nohlsearch<CR>
    nnoremap ]] j0[[%/{<CR>:nohlsearch<CR>
    nnoremap G :norm! Gzz<CR>
    nmap <C-g>g :Gstatus<CR>gg<C-n>
    nmap <C-g>d :Gdiff<CR>
    nmap <C-g>b :Gblame<CR>
    " RONAKG END
endfunction


" Check if NERDTree is open or active
function! IsNERDTreeOpen()
    if ( exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1 )
            return 1
    endif
endfunction

" Call NERDTreeFind if NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! NERDTreeSync()
    if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
    endif
endfunction

" Alt+Right but NOT when in Nerdtree or Tagbar
function! NextBuffer()
    if ( 'nerdtree' != (&ft) && 'tagbar' != (&ft) )
        :bn
    endif
endfunction


" Alt+Left but NOT when in Nerdtree or Tagbar
function! PrevBuffer()
    if ( 'nerdtree' != (&ft) && 'tagbar' != (&ft) )
        :bp
    endif
endfunction

function! FindAndReplaceAll(from, to)
    "%s/from/to/g"
    "echo    a:from
    execute "%s/" . a:from . "/" . a:to . "/gc"
endfunction

"" Grep for word under the cursor
"if executable("rg")
    "set grepprg=rg\ --vimgrep\ -g\ '!tags'
"elseif executable("ag")
    "set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
"endif
"set grepformat=%f:%l:%c:%m,%f:%l:%m

function! GetVisualSelection()
    " https://stackoverflow.com/a/6271254/777247
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

function! Search(pattern, flags)
    if strlen(a:pattern) <= 2
        let search_pattern = input("Enter search term: ")
    else
        let search_pattern = a:pattern
    endif
    execute "silent grep! " . a:flags . " \"" . search_pattern . "\""
    botright copen
    execute "normal /" . search_pattern
endfunction

" whole word, smart case
nnoremap <leader>vv :call Search(expand("<cword>"), "-w -S -F")<CR>
" whole word, ignore case
nnoremap <leader>vi :call Search(expand("<cword>"), "-w -i -F")<CR>
" any part of word, smart case
nnoremap <leader>VV :call Search(expand("<cword>"), "-S -F")<CR>
" open search
nnoremap <leader>VI :call Search(expand("<cword>"), "-i -F")<CR>

" Visual mode mappings
vnoremap <leader>vv :call Search(GetVisualSelection(), "-w -S -F")<CR>
vnoremap <leader>vi :call Search(GetVisualSelection(), "-w -i -F")<CR>
vnoremap <leader>VV :call Search(GetVisualSelection(), "-S -F")<CR>
vnoremap <leader>VI :call Search(GetVisualSelection(), "-i -F")<CR>

" Prompt for search text
nnoremap <leader>vp :call Search("", "-w -S")<CR>
nnoremap <leader>VP :call Search("", "-S")<CR>

" Easier movement in visual mode
vnoremap > >gv
vnoremap < <gv

" Don't add a newline when preview window is visible
inoremap <silent><expr> <CR> pumvisible() ? "<C-y>" : "<C-g>u<CR>"

map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$

" Backspace in normal mode switches to last buffer
nnoremap <BS> <C-o>

" Expand matching braces only when pressing Enter
" inoremap {<CR> {<CR>}<Esc>==ko

" Don't let x and c to spoil the yank register
nnoremap x "_x
nnoremap c "_c

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

function! Quit()
    let debug = 0
    if debug
        echom 'Entering Quit(), current buffer is: ' . bufname('%')
        echom 'Previous buffer is: ' . bufname('#')
    endif

    let buflisted = &buflisted
    if !buflisted
        echom 'Quitting because buffer is not listed'
        quit
        return
    endif

    " number of listed buffers
    if v:version >= 800
        let l:nbuf = len(getbufinfo({'buflisted':1}))
    else
        let l:nbuf = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    endif

    if debug
        echom 'Number of buffers: ' . l:nbuf
    endif

    " Just quit for this special buffers
    let l:buffer_types = ['quickfix', 'nofile', 'help', 'terminal']
    if index(l:buffer_types, &buftype) >= 0 || l:nbuf == 1
        quit
        return
    endif

    " total number of splits
    let l:nsplit = winnr('$')
    let l:cur_bufnr = bufnr('%')

    " If the bufhidden is set to delete, just jump back to
    " previous buffer, this buffer gets deleted on its own
    let bufhid = &bufhidden

    if bufhid == 'delete' || bufhid == 'wipe'
        if debug
            echom 'Quitting because bufhid is ' . bufhid
        endif

        if l:nbuf == l:nsplit
            quit
        else
            bprevious
        endif

        return
    endif

    if debug
        echom 'No of splits: ' . l:nsplit . ', Current buffer: ' . l:cur_bufnr
        echom 'Previous buffer: ' . bufnr('#')
    endif

    if l:nbuf == l:nsplit
        " delete the buffer if number of open splits is same as buffers
        bdelete
    elseif l:nbuf > 1
        " Jump to previous buffer and then delete this buffer, so that
        " we're back to where we were before
        bprevious | execute 'bdelete ' . l:cur_bufnr
    else
        " quit if this is the last buffer
        quit
    endif
endfunction

" Quicker save and quit
nnoremap <silent> e :call Quit()<CR>
nnoremap <silent> <C-e> :q<CR>
nnoremap <silent> w :update<CR>
inoremap <silent> jj <Esc>

" Paste in insert mode
inoremap <C-p> <C-r>0


" Easier to get command prompt
nnoremap ; :
vnoremap ; :

" Jump to start and end of line using the home row keys
nnoremap 0 ^
nnoremap ^ 0

nnoremap <leader>l :call NumberToggle()<CR>

" Add a heading/subheading to current line
nnoremap <leader>= yypVr=<Esc>==
nnoremap <leader>- yypVr-<Esc>==

" Go to end of yanked/pasted text
vnoremap <silent> y y`]
" }}

" Commit and push {{
function! s:CommitPush(...)
    if a:0 > 0
        execute "Gcommit -am '" . join(a:000) . "'"
    else
        :Gcommit -am "update notes"
    endif

    :Gpush
endfunction

command! -nargs=? CommitPush call s:CommitPush(<f-args>)

" ======================================================================================
" UpdateGlobalDB()
" Incrementally update the database generated by GNU GLOBAL
" ======================================================================================
function! UpdateGlobalDB()
    try
        silent! execute '!gtags -i &'
    catch
    endtry
endfunction

" ======================================================================================
" Strip trailing whitespaces
" ======================================================================================
function! StripTrailingWhite()
    let l:winview = winsaveview()
    silent! %s/\s\+$//
    call winrestview(l:winview)
endfunction

function! SetTerminal()
    wincmd L
    startinsert
    setlocal nonumber
    setlocal norelativenumber
    if exists(':IndentLinesDisable')
        IndentLinesDisable
    endif
endfunction


" Auto commands
" ======================================================================================

if has("autocmd")"
    " Enable spell checking

    augroup mycommands
        autocmd!
        autocmd FileType gitcommit setlocal spell
        autocmd FileType markdown setlocal spell
        autocmd FileType text setlocal spell
        autocmd FileType rst setlocal spell

        "autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
        "autocmd WinLeave * setlocal nocursorline

        " omnifuncs
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd FileType cpp set omnifunc=omni#cpp#complete#Main

        " Remember cursor position between vim sessions
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

        " Update diff when leaving from insertmode or writing to file
        autocmd BufWritepost * if &diff == 1 | diffupdate | endif

        "if g:quickr_cscope_program == "gtags-cscope"
        "    " Update GLOBAL database after file is written
        ""    autocmd BufWritePost *.c call UpdateGlobalDB()
        ""    autocmd BufWritePost *.cpp call UpdateGlobalDB()
        ""    autocmd BufWritePost *.h call UpdateGlobalDB()
        ""    autocmd User QfReplacementBufWritePost doautocmd BufWritePost
        "endif

        "autocmd BufWritePost $MYVIMRC,vimrc source $MYVIMRC | AirlineRefresh

        " Use shell syntax for .conf files
        autocmd BufRead,BufNewFile *.conf set syntax=sh

        " Open help in vertical split
        autocmd FileType help wincmd L

        if has('nvim')
            au BufEnter * if &buftype == 'terminal' | :call SetTerminal() | endif
        endif

    augroup END
endif

function! NumberToggle()
    if(&relativenumber == 1 && &number == 1)
        set number
        set norelativenumber
    elseif (&number == 1 && &relativenumber == 0)
        set norelativenumber
        set nonumber
    else
        set number
        set relativenumber
    endif
endfunction

if &diff
    "nnoremap e :qa<CR>
    nnoremap wq :wq<CR>
    "nnoremap W :wa!<CR>
    set number
    set norelativenumber
endif


let g:airline#extensions#tabline#enabled                      = 1
let g:airline#extensions#tabline#buffer_min_count             = 0
let g:airline#extensions#tabline#tab_min_count                = 0
let g:airline#extensions#tabline#buffer_idx_mode              = 0
let g:airline#extensions#tabline#buffer_nr_show               = 0
let g:airline#extensions#tabline#show_buffers                 = 1
let g:airline#extensions#branch#enabled                       = 1
let g:airline#extensions#tagbar#enabled                       = 1
let g:airline_powerline_fonts                                 = 1
let g:airline#extensions#whitespace#enabled       = 0
let g:airline#extensions#tabline#fnamemod         = ':t'
let g:airline_theme                               = 'dracula'
let g:airline_section_c                           = '%{fnamemodify(expand("%"), ":~:.")}'
let g:airline_section_x                           = '%{fnamemodify(getcwd(), ":t")}'
let g:airline_section_y                           = airline#section#create(['filetype'])
" Easier tab/buffer switching
"nmap <leader>1 <Plug>AirlineSelectTab1
"nmap <leader>2 <Plug>AirlineSelectTab2
"nmap <leader>3 <Plug>AirlineSelectTab3
"nmap <leader>4 <Plug>AirlineSelectTab4
"nmap <leader>5 <Plug>AirlineSelectTab5
"nmap <leader>6 <Plug>AirlineSelectTab6
"nmap <leader>7 <Plug>AirlineSelectTab7
"nmap <leader>8 <Plug>AirlineSelectTab8
"nmap <leader>9 <Plug>AirlineSelectTab9


"nnoremap <silent> <leader>p :FZF --no-reverse<CR>
"nnoremap <silent> <leader>b :Tags<CR>
"nnoremap b :Buffers<CR>

" Change cursor shape based on mode.
if has('nvim')
    "set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
else
    set t_ut=
    set gcr=a:blinkon0
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
endif

let g:startify_list_order = [['Most recently used files in current directory:'], 'dir',
            \                ['Bookmarks:'], 'bookmarks']
let g:startify_change_to_dir = 0
let g:startify_files_number = 10
let g:startify_bookmarks = [ {'c': '~/.vim/vimrc'}, {'d': '~/.vim/vim-plug.vim'}, {'t': '~/.tmux.conf'},  {'i' : '~/.config/i3/config'}, {'p' : '~/.config/polybar/config'}, {'h' : '~/.hyper.js'}  ]

"if filereadable(".vim.custom")
    "so .vim.custom
"endif

"function! ZoomToggle()
    "if exists('t:zoomed') && t:zoomed
        "execute t:zoom_winrestcmd
        "let t:zoomed = 0
    "else
        "let t:zoom_winrestcmd = winrestcmd()
        "resize
        "vertical resize
        "let t:zoomed = 1
    "endif
"endfunction
"nnoremap <silent> <C-a> :call ZoomToggle()<CR>

""let g:jedi#use_splits_not_buffers = "right"
"let g:jedi#completions_enabled = 1

let g:indentLine_setColors = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_char = '│'

"let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

"let g:clever_f_ignore_case = 1
"let g:clever_f_smart_case = 1
"let g:clever_f_fix_key_direction = 1


"command! -nargs=+ Silent
            "\ | execute ':silent !'.<q-args>
            "\ | execute ':redraw!'

"nmap K <plug>(Vman)

"let g:EasyMotion_smartcase = 1
"nmap s <Plug>(easymotion-s2)

"let g:vim_markdown_folding_disabled = 1
"let g:vim_markdown_conceal = 0

"let g:vim_json_syntax_conceal = 0

"" Use deoplete.
"let g:deoplete#enable_at_startup = 1
"let g:deoplete#file#enable_buffer_path = 1
"let g:deoplete#auto_complete_start_length = 2

nnoremap <C-b> :vsplit term://bash<CR>

" Window navigation function
" Make ctrl-h/j/k/l move between windows and auto-insert in terminals
"func! s:mapMoveToWindowInDirection(direction)
"func! s:maybeInsertMode(direction)
        "stopinsert
        "execute "wincmd" a:direction

        "if &buftype == 'terminal'
        "startinsert!
        "endif
"endfunc

"execute "tnoremap" "<silent>" "<C-" . a:direction . ">"
                "\ "<C-\\><C-n>"
                "\ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
"execute "nnoremap" "<silent>" "<C-" . a:direction . ">"
                "\ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
"endfunc

"for dir in ["h", "j", "l", "k"]
"call s:mapMoveToWindowInDirection(dir)
"endfor
"tnoremap <esc><esc> <C-\><C-n>

"" deoplete-clang {{
"let g:deoplete#file#enable_buffer_pathete#sources#clang#libclang_path = $MY_LIBCLANG_PATH
"let g:deoplete#sources#clang#clang_header = $MY_CLANGHEADER_PATH
"let g:deoplete#sources#clang#sort_algo = 'priority'
"" }}

"let g:SuperTabContextDefaultCompletionType = "<c-n>"
"let g:SuperTabDefaultCompletionType = "<c-n>"

"let g:tmux_navigator_disable_when_zoomed = 1

"let g:neoformat_enabled_python = ['autopep8']
"let g:neoformat_try_formatprg = 1
"let g:neoformat_only_msg_on_error = 1

"au FileType python setlocal formatprg=autopep8\ -

"nnoremap <C-d> :call ZoomToggle()<CR>:Gdiff<CR>

"let g:ale_lint_on_text_changed = 'never'
"let g:ale_linters = { 'c': ['clang'], }
"highlight ALEErrorSign guibg=red guifg=yellow
"highlight ALEWarningSign guibg=yellow guifg=black

" ======================================================================================
" vim-signify
" ======================================================================================
"let g:signify_sign_delete            = '-'


"map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
"map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
"map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
"map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)

"inoremap {<CR> {<CR>}<Esc>O

"let g:echodoc_enable_at_startup = 1

" Autoclose preview windows
" https://github.com/Shougo/deoplete.nvim/issues/115
"autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" https://github.com/Shougo/deoplete.nvim/issues/100
" use tab to forward cycle
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" use tab to backward cycle
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

"function! MyJavaSearch(pattern, type)
    "if strlen(a:pattern) <= 2
        "let search_pattern = input("Enter search term: ")
    "else
        "let search_pattern = a:pattern
    "endif

    "execute "JavaSearch -p " . search_pattern . " -t all -x " . a:type
"endfunction

"nnoremap <silent> <buffer> <cr> :JavaSearchContext<cr>
"nnoremap <silent> <leader>c :echo "Opening call hierarchy..."<CR>:JavaCallHierarchy<CR>
"nnoremap <silent> <leader>ss :call MyJavaSearch(expand("<cword>"), "all")<CR>
"nnoremap <silent> <leader>sr :call MyJavaSearch(expand("<cword>"), "references")<CR>
"nnoremap <silent> <leader>sp :call MyJavaSearch(expand("<cword>"), "implementation")<CR>

"let java_highlight_all = 1
"let java_highlight_java_lang_ids = 1
"let java_comment_strings = 1
"let java_highlight_functions = 1
"let java_highlight_debug = 1
"let java_mark_braces_in_parens_as_errors = 1

"let g:jedi#show_call_signatures = "1"


"let g:vem_tabline_show = 2
"let g:vem_tabline_left_arrow = '◀'
"let g:vem_tabline_right_arrow = '▶'
